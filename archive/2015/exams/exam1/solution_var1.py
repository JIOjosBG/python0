# -*- coding: utf-8 -*-

# === Задача 1 ===

def task1():
    n = int(input('n = '))
    # Дефинираме променлова, в който да запазим сумата.
    # За начална стойност на сумата задаваме `0`.
    # Това няма да повлияе на крайния резултат, тъй ката `0 + x = x`.
    sum = 0
    # Създаваме брояч, който ще приема стойности от `3` до `n` вклюяително,
    # през `3` и сумираме стойностите на брояча
    for counter in range(3, n + 1, 3):
        sum += counter
    print('sum =', sum)


# === Задача 2 ===

def task2():
    n = int(input('n = '))
    # Създаваме брояч на редовете, който ще приема стойности от `0` до `n`
    for row in range(n):
        # Създаваме брояч на колоните,
        # който ще приема стойности от `0` до `row` включително
        for col in range(row + 1):
            # Отпечатвлме всяка колона, като не отпечатваме символ за край на ред
            print('##', end='')
        # Отпечатвлме символ за край на ред
        print()


# === Задача 3 ===

def task3():
    """
    Тук основната идея е, че рестото `change` може да се представи като сума от
    банкноти по 5 лева и остатък: `change = count5 * 5 + rest`.
    Ако игнорираме остатъка `rest` то `count5 = change // 5`.
    Тук използваме целочислено делене, което прави точно това - игнорира остатъка

    Селд като вече имаме броя банкното по 5 лева, трябва да направим същите
    операции с остатъка. Но как да го намерим?
    Просто изплзваме делене по модул: `rest = change % 5`.
    """

    change = int(input('change = '))
    # За всяка стойност на банкнотите:
    for coin in [5, 2, 1]:
        # Намираме броя банкноти с целочилено делене
        coins_count = change // coin
        if 0 < coins_count:
            print('%d * %d' % (coins_count, coin))
        # Новата стойност на рестото е остатъкът от сумата
        change = change % coin


print('Task1')
task1()
print('Task2')
task2()
print('Task3')
task3()
